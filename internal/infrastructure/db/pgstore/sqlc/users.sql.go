// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package pgstore

import (
	"context"
	"database/sql"
	"vivaop/internal/entities/userentity"
	"vivaop/internal/usecases/app/repos/userrepo"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	id,
    fname,
    mname,
    lname,
    email,
    phone,
    password,
    birthdate,
    country_id
) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9 ) RETURNING id, fname, mname, lname, email, phone, password, birthdate, country_id, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	ID        uuid.UUID      `json:"id"`
	Fname     sql.NullString `json:"fname"`
	Mname     sql.NullString `json:"mname"`
	Lname     sql.NullString `json:"lname"`
	Email     string         `json:"email"`
	Phone     string         `json:"phone"`
	Password  string         `json:"password"`
	Birthdate sql.NullTime   `json:"birthdate"`
	CountryID sql.NullInt32  `json:"country_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *userrepo.CreateUserParams) (*userentity.User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Fname,
		arg.Mname,
		arg.Lname,
		arg.Email,
		arg.Phone,
		arg.Password,
		arg.Birthdate,
		arg.CountryID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Mname,
		&i.Lname,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Birthdate,
		&i.CountryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)

	return &userentity.User{
		ID:        i.ID,
		FName:     i.Fname.String,
		MName:     i.Mname.String,
		LName:     i.Lname.String,
		Email:     i.Email,
		Phone:     i.Phone,
		Password:  i.Password,
		Birthday:  i.Birthdate.Time.String(),
		CountryID: i.CountryID.Int32,
		CreatedAt: i.CreatedAt,
	}, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, fname, mname, lname, email, phone, password, birthdate, country_id, created_at, updated_at, deleted_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*userentity.User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Mname,
		&i.Lname,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Birthdate,
		&i.CountryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &userentity.User{
		ID:       i.ID,
		FName:    i.Fname.String,
		MName:    i.Mname.String,
		LName:    i.Lname.String,
		Email:    i.Email,
		Phone:    i.Phone,
		Password: i.Password,
		Birthday: i.Birthdate.Time.String(),
	}, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, fname, mname, lname, email, phone, password, birthdate, country_id, created_at, updated_at, deleted_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (*userentity.User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Mname,
		&i.Lname,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Birthdate,
		&i.CountryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &userentity.User{
		ID:       i.ID,
		FName:    i.Fname.String,
		MName:    i.Mname.String,
		LName:    i.Lname.String,
		Email:    i.Email,
		Phone:    i.Phone,
		Password: i.Password,
		Birthday: i.Birthdate.Time.String(),
	}, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, fname, mname, lname, email, phone, password, birthdate, country_id, created_at, updated_at, deleted_at FROM users
WHERE phone = $1 LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (*userentity.User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Mname,
		&i.Lname,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Birthdate,
		&i.CountryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &userentity.User{
		ID:       i.ID,
		FName:    i.Fname.String,
		MName:    i.Mname.String,
		LName:    i.Lname.String,
		Email:    i.Email,
		Phone:    i.Phone,
		Password: i.Password,
		Birthday: i.Birthdate.Time.String(),
	}, err
}
