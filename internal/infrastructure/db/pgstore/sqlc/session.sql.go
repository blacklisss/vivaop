// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: session.sql

package pgstore

import (
	"context"
	"vivaop/internal/entities/sessionentity"
	"vivaop/internal/usecases/app/repos/sessionrepo"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id,
  refresh_token,
  user_agent,
  client_ip,
  is_blocked,
  expires_at
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
`

func (q *Queries) CreateSession(ctx context.Context, arg *sessionrepo.CreateSessionParams) (*sessionentity.Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &sessionentity.Session{
		ID:           i.ID,
		RefreshToken: i.RefreshToken,
		UserAgent:    i.UserAgent,
		ClientIp:     i.ClientIp,
		IsBlocked:    i.IsBlocked.Bool,
		ExpiresAt:    i.ExpiresAt.Time,
	}, err
}

const getSession = `-- name: GetSession :one
SELECT id, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (*sessionentity.Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &sessionentity.Session{
		ID:           i.ID,
		RefreshToken: i.RefreshToken,
		UserAgent:    i.UserAgent,
		ClientIp:     i.ClientIp,
		IsBlocked:    i.IsBlocked.Bool,
		ExpiresAt:    i.ExpiresAt.Time,
	}, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE
FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}
