// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: email_verification.sql

package pgstore

import (
	"context"
	"vivaop/internal/entities/userentity"
	"vivaop/internal/usecases/app/repos/userrepo"

	"github.com/google/uuid"
)

const createEmailVerification = `-- name: CreateEmailVerification :one
INSERT INTO verify_email (user_id,
                          token,
                          expired_at)
VALUES ($1, $2, $3)
RETURNING user_id, token, expired_at, created_at
`

func (q *Queries) CreateEmailVerification(ctx context.Context, arg *userrepo.CreateEmailVerificationParams) (*userentity.EmailVerification, error) {
	row := q.db.QueryRowContext(ctx, createEmailVerification, arg.UserID, arg.Token, arg.ExpiredAt)
	var i VerifyEmail
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return &userentity.EmailVerification{
		UserID:    i.UserID,
		Token:     i.Token,
		ExpiredAt: i.ExpiredAt,
		CreatedAt: i.CreatedAt,
	}, err
}

const deleteEmailVerification = `-- name: DeleteEmailVerification :exec
DELETE
FROM  verify_email
WHERE user_id = $1
`

func (q *Queries) DeleteEmailVerification(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEmailVerification, userID)
	return err
}

const getEmailVerification = `-- name: GetEmailVerification :one
SELECT user_id, token, expired_at, created_at FROM verify_email
WHERE token = $1 LIMIT 1
`

func (q *Queries) GetEmailVerification(ctx context.Context, token string) (*userentity.EmailVerification, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerification, token)
	var i VerifyEmail
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return &userentity.EmailVerification{
		UserID:    i.UserID,
		Token:     i.Token,
		ExpiredAt: i.ExpiredAt,
		CreatedAt: i.CreatedAt,
	}, err
}
