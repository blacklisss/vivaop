// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: organization_contacts.sql

package pgstore

import (
	"context"
	"vivaop/internal/entities/organization_contact_entity"
	"vivaop/internal/usecases/app/repos/organization_contact_repo"

	"github.com/google/uuid"
)

const createOrganizationContact = `-- name: CreateOrganizationContact :one
INSERT INTO organization_contacts
(id,
 organization_id,
 name,
 phone
)
VALUES ($1, $2, $3, $4)
RETURNING id, organization_id, name, phone, created_at, updated_at, deleted_at
`

func (q *Queries) CreateOrganizationContact(ctx context.Context, arg *organization_contact_repo.CreateOrganizationContactParams) (*organization_contact_entity.OrganizationContact, error) {
	row := q.db.QueryRowContext(ctx, createOrganizationContact,
		arg.ID,
		arg.OrganizationID,
		arg.Name,
		arg.Phone,
	)
	var i OrganizationContact
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &organization_contact_entity.OrganizationContact{
		ID:             i.ID,
		OrganizationID: i.OrganizationID,
		Name:           i.Name,
		Phone:          i.Phone,
		CreatedAt:      i.CreatedAt,
		UpdatedAt:      i.UpdatedAt.Time,
		DeletedAt:      i.DeletedAt.Time,
	}, err
}

const deleteOrganizationContact = `-- name: DeleteOrganizationContact :one
UPDATE organization_contacts
SET deleted_at = NOW()
WHERE id = $1
  AND deleted_at IS NULL
RETURNING id, organization_id, name, phone, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteOrganizationContact(ctx context.Context, id uuid.UUID) (*organization_contact_entity.OrganizationContact, error) {
	row := q.db.QueryRowContext(ctx, deleteOrganizationContact, id)
	var i OrganizationContact
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &organization_contact_entity.OrganizationContact{
		ID:             i.ID,
		OrganizationID: i.OrganizationID,
		Name:           i.Name,
		Phone:          i.Phone,
		CreatedAt:      i.CreatedAt,
		UpdatedAt:      i.UpdatedAt.Time,
		DeletedAt:      i.DeletedAt.Time,
	}, err
}

const getOrganizationContact = `-- name: GetOrganizationContact :one
SELECT id, organization_id, name, phone, created_at, updated_at, deleted_at
FROM organization_contacts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrganizationContact(ctx context.Context, id uuid.UUID) (*organization_contact_entity.OrganizationContact, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationContact, id)
	var i OrganizationContact
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &organization_contact_entity.OrganizationContact{
		ID:             i.ID,
		OrganizationID: i.OrganizationID,
		Name:           i.Name,
		Phone:          i.Phone,
		CreatedAt:      i.CreatedAt,
		UpdatedAt:      i.UpdatedAt.Time,
		DeletedAt:      i.DeletedAt.Time,
	}, err
}

const listOrganizationContacts = `-- name: ListOrganizationContacts :many
SELECT id, organization_id, name, phone, created_at, updated_at, deleted_at
FROM organization_contacts
WHERE organization_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) ListOrganizationContacts(ctx context.Context, organizationID uuid.UUID) ([]*organization_contact_entity.OrganizationContact, error) {
	rows, err := q.db.QueryContext(ctx, listOrganizationContacts, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*organization_contact_entity.OrganizationContact{}
	for rows.Next() {
		var i OrganizationContact
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		item := &organization_contact_entity.OrganizationContact{
			ID:             i.ID,
			OrganizationID: i.OrganizationID,
			Name:           i.Name,
			Phone:          i.Phone,
			CreatedAt:      i.CreatedAt,
			UpdatedAt:      i.UpdatedAt.Time,
			DeletedAt:      i.DeletedAt.Time,
		}
		items = append(items, item)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
